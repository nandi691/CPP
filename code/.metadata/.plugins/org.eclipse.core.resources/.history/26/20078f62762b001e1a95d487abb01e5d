#include "Dasoha.h"

#define TODAYS_SLOT "/todays_slot"
#define TOMORROW_SLOT "/tomorrows_slot"
#define BOOK_A_SLOT "/book_a_slot"
#define SLOTS_FOR_THE_WEEK "/slots_for_the_week"
#define SLOTS_FOR_THE_MONTH "/slots_for_this_month"
#define SLOTS_FOR_NEXT_MONTH "/slots_for_next_month"
#define SLOTS_FOR_THE_DAY "/slot_for_the_day"
#define DONATE "/donate"
#define FILE_NAME "/opt/data/Booking_"
#define FILE_EXT ".json"

#define SLOT_IS_AVAILABLE 0x1001
#define SLOT_IS_NOT_AVAILABLE 0x1002
#define PARSING_ERROR 0x1003
#define STATUS_FAIL 0x1004
#define STATUS_OK 0x1005

#define TIMEOUT 10

std::string g_month[13] = {
		"",
		"Jan",
		"Feb",
		"Mar",
		"Apr",
		"May",
		"Jun",
		"Jul",
		"Aug",
		"Sep",
		"Oct",
		"Nov",
		"Dec"
};

enum g_months {
	    Jan=1,
	    Feb,
	    Mar,
	    Apr,
	    May,
	    Jun,
	    Jul,
	    Aug,
	    Sep,
	    Oct,
	    Nov,
	    Dec
};

Dasoha::Dasoha()
{
	m_botCfg = new BotConfig;
	m_offset = 1;
	m_senderID = 1;

	m_options = "Options are :\n\n";
	m_options += "To view todays slot : \n";
	m_options += (TODAYS_SLOT + std::string("\n\n"));
	m_options += "To view tomorrows slot : \n";
	m_options += (TOMORROW_SLOT + std::string("\n\n"));
	m_options += "To view slot for week : \n";
	m_options += (SLOTS_FOR_THE_MONTH + std::string("\n\n"));
	m_options += "To view slot for next month : \n";
	m_options += (SLOTS_FOR_NEXT_MONTH + std::string("\n\n"));
	m_options += "To view slot for a day : \n";
	m_options += (SLOTS_FOR_THE_DAY + std::string("\n\n"));
	m_options += "To book a slot : \n";
	m_options += (BOOK_A_SLOT + std::string("\n\n"));
	m_options += "To Donate : \n";
	m_options += (DONATE + std::string("\n\n"));
}

Dasoha::~Dasoha()
{
	delete m_botCfg;
	m_botCfg = nullptr;
}

void Dasoha::Init()
{

	using namespace std;
	ReadBotConfig();
	while(1){
		//Main While loop to receive inputs and send response
		sleep(0);
		if(!ReadData())
				continue;
		if(m_data.find("/") != string::npos)
		{
			ProcessCommand();
			continue;
		}
		if(m_data != "Hi")
		{
			SendToBot("I will respond only to \"Hi\"\n\n Note : Session timer is running for a minute\n\nSession will be closed if not responded within a minute");
			continue;
		}
		SendToBot(m_options);
	}
}

void Dasoha::ProcessCommand()
{
	using namespace std;
	SendToBot("Please wait until your request is processed...");
	tm *local_time = GetLocalTime();
	if(m_data == TODAYS_SLOT)
	{
		//Add handler
		GetSlot();
	}
	else if(m_data == TOMORROW_SLOT)
	{
			//Add handler
	}
	else if(m_data == BOOK_A_SLOT)
	{
			BookSlot();
	}
	else if(m_data == SLOTS_FOR_THE_MONTH)
	{
			//Add handler
	}
	else if(m_data == SLOTS_FOR_NEXT_MONTH)
	{
				//Add handler
	}
	else if(m_data == SLOTS_FOR_THE_DAY)
	{
			int date,month,year;
			GetSlotForTheDay(date,month,year);
	}
	else if(m_data == DONATE)
	{
			//Add handler
	}
	else
	{
		//SendToBot();
		SendToBot("Invalid request \n\n"+m_options);
	}



}

void Dasoha::ReadBotConfig()
{
	Json::Value root;
	if(ParseFile(root,BOT_CFG_FILE)	== false)
	{
		cout<<"bot config file parse failed"<<endl;
		exit(0);
	}

	m_botCfg->botID = root[0]["BotID"].asString();
	m_botCfg->botToken = root[0]["BotToken"].asString();
	m_botCfg->msgID = root[0]["MessageID"].asString();
	m_botCfg->name = root[0]["Name"].asString();
}

void Dasoha::SendToBot(std::string data)
{
	data = ::UrlEncode(data);
	std::string url = "https://api.telegram.org/bot"+m_botCfg->botID+":"+m_botCfg->botToken+"/sendMessage?chat_id="+
		m_senderID+"&&text="+data;
	std::string response;

	::SendCurlData(url,response);
}

bool Dasoha::ReadData()
{
	std::string url = "https://api.telegram.org/bot"+m_botCfg->botID+":"+m_botCfg->botToken+"/getUpdates?offset="+to_string(m_offset)+"?limit=1";
	Json::Value root;
	m_botData.clear();

	::SendCurlData(url,m_botData);
	m_data.clear();
	m_senderID = 1;
	if(::ParseString(root,m_botData))
	{
		for (const Json::Value& text : root["result"])
		{
			m_offset=text["update_id"].asInt()+1;
			m_data = text["message"]["text"].asString();
			m_senderID = text["message"]["from"]["id"].asString();
			m_senderName = text["message"]["from"]["first_name"].asString();
		}
	}
	return (m_data != "");
}

DasohaKartha::DasohaKartha(const std::string &name,int date,int month ,int year,const std::string &address, const std::string &phn)
{
	this->m_name = name;
	this->m_date = date;
	this->m_month = month;
	this->m_year = year;
	this->m_address = address;
	this->m_phn_num = phn;
}

DasohaKartha::~DasohaKartha()
{

}

int Dasoha::GetMonthNumber()
{
	int month = GetLocalTime()->tm_mon + 1;
	if(m_data == "/this_month")
	{
		return month;
	}
	else if (m_data == "/next_month")
	{
		if(month == 12)
			month = 0;
		return month+1;
	}
	return 0;

}

bool Dasoha::WaitForData()
{
	tm *local_time = GetLocalTime();
	int localTime = (int)time(NULL);
	m_data.clear();
	while(!ReadData())
	{
		sleep(1);
		if((int)time(NULL)-localTime > TIMEOUT){
			break;
		}
		continue;
	}
	if(m_data == "")
	{
		sleep(10);
		SendToBot("Closing this session. Please ping Hi Again");
		//sleep(10);
		return false;
	}
	return true;
}

int Dasoha::ValidateDate(int month)
{
	if(!is_number(m_data)){
		SendToBot("Invalid date string");
		return 0;
	}

	int date = stoi(m_data);
	if(!::IsItValidDateInMonth(date,month))
	{
		SendToBot("Invalid date for the month");
		return 0;
	}
	return date;
}

void Dasoha::BookSlot()
{
	int date=0,month=0,year=0;
	bool itsForBooking = true;
	int slotSatus = GetSlotForTheDay(date,month,year,itsForBooking);
	if(slotSatus != SLOT_IS_AVAILABLE)
	{
		return;
	}

	SendToBot("Please enter the Name\n");
	WaitForData();
	std::string name = m_data;

	SendToBot("Please enter the Phone Number");
	WaitForData();
	std::string phn = m_data;

	SendToBot("Please enter the Address");
	WaitForData();
	std::string address = m_data;

	DasohaKartha kartha(name,date,month,year,address,phn);
	SaveCfg(&kartha);

	PrintSlotDetails(&kartha);
	SendToBot("Saved the entry successfully");


	return;
}

void Dasoha::SaveCfg(DasohaKartha *kartha)
{
	if(kartha == NULL)
	{
		return;
	}
	std::string fileName = FILE_NAME + std::to_string(kartha->m_month)+
			"_"+std::to_string(kartha->m_year)+std::string(FILE_EXT);

	Json::Value event;
	event["date"] = kartha->m_date;
	event["name"] = kartha->m_name;
	event["phn"] = kartha->m_phn_num;
	event["address"] = kartha->m_address;
	Json::FastWriter fastWriter;
	std::string data = "";
	if(IsFileExists(fileName.c_str()))
		data=",";

	data += fastWriter.write(event);
	WriteToFile(fileName,data);
	return;
}


int Dasoha::GetSlotAvailableStatus(int date,int month,int year)
{
	std::string fileName = FILE_NAME + std::to_string(month)+
				"_"+std::to_string(year)+std::string(FILE_EXT);

	if(!IsFileExists(fileName.c_str()))
	{
		SendToBot("Slot is available");
		return SLOT_IS_AVAILABLE;
	}

	Json::Value jsonObj;
	if(!ParseFile(jsonObj,fileName))
	{
		SendToBot("Corrupted System! Contact Admin");
		return PARSING_ERROR;
	}

	for(const Json::Value & value : jsonObj)
	{
			if (date == value["date"].asInt())
			{
				SendToBot("Slot is Booked");
				return SLOT_IS_NOT_AVAILABLE;
			}
	}
	SendToBot("Slot is available");
	return SLOT_IS_AVAILABLE;
}

int Dasoha::GetSlotForTheDay(int &date, int &month,int & year,bool isItForBooking)
{
	SendToBot("Please select the month\n\n/this_month\n/next_month\n");
	WaitForData();
	month = GetMonthNumber();
	year = GetLocalTime()->tm_year + 1900;
	if(month == 0)
	{
		SendToBot("Invalid option selected");
		return STATUS_FAIL;
	}

	if (month == 1 && m_data == "/next_month")
	{
		year++;
	}

	SendToBot("Please Enter the date (1 to 30/31)");
	std::string strMonth = m_data;
	WaitForData();
	date = ValidateDate(month);

	if(date == 0)
		return STATUS_FAIL;

	if(strMonth == "/this_month" && date < GetLocalTime()->tm_mday && isItForBooking)
	{
		SendToBot("Not Allowed ! You are booking for previous date");
		return STATUS_FAIL;
	}
	int status = GetSlotAvailableStatus(date,month,year);
	if(status == SLOT_IS_NOT_AVAILABLE)
	{
		GetSlotDetails(date,month,year);
	}
	return status;
}

void Dasoha::GetSlotDetails(const int date,const int month,int year)
{
	std::string fileName = FILE_NAME + std::to_string(month)+
				"_"+std::to_string(year)+std::string(FILE_EXT);
	if(!IsFileExists(fileName.c_str()))
	{
		SendToBot("Slot is Not Booked");
		return ;
	}
	Json::Value jsonObj;
	if(!ParseFile(jsonObj,fileName))
	{
		SendToBot("Corrupted System! Contact Admin");
		return ;
	}

	for(const Json::Value & value : jsonObj)
	{
			if (date == value["date"].asInt())
			{
				DasohaKartha kartha(value["name"].asString(),
									date,month,year,
									value["address"].asString(),
									value["phn"].asString());
				PrintSlotDetails(&kartha);
				return ;
			}
	}
	return;
}

void Dasoha::GetSlot(bool tomorrow)
{
	tm * tmPtr = GetLocalTime();
	int date = tmPtr->tm_mday;
	int month = tmPtr->tm_mon;
	int year = tmPtr->tm_year+1900;

	if(tomorrow){
		switch(month){
		case Jan:
		case Mar:
		case May:
		case Jul:
		case Aug:
		case Oct: 	if(date == 31){
						date = 1;
						month++;
					}
					else
						date++;
					break;

		case Dec: 	if(date == 31){
						date = 1;
						month=Jan;
						year++;
					}
					else
						date++;
					break;

		case Feb:	if(date > 29){
						date = 1;
						month++;
					}
					else if (date > 28 && year%4 != 0){
						date = 1;
						month++;
					}
					else
						date++;
					break;

		default:	if(date == 30){
						date = 1;
						month++;
					}
					else
						date++;
					break;

		}
	}


	int slotStatus = GetSlotAvailableStatus(date,month,year);
	switch(slotStatus){
		case SLOT_IS_NOT_AVAILABLE:	GetSlotDetails((const int )date,(const int )month,year);
									break;
		case SLOT_IS_AVAILABLE: 	SendToBot("No bookings found");
									break;
		default: 					SendToBot("Internal error, Contact Admin");
									break;
	}

}

void Dasoha::PrintSlotDetails(DasohaKartha *kartha)
{
	if(kartha == NULL)
	{
		SendToBot("Internal Error in PrintSlotDetails, contact admin");
		return;
	}
	std::string slotStr = "Name \t\t\t: ";
	slotStr += (kartha->m_name + "\n");
	slotStr += "Phone \t\t\t: ";
	slotStr += ("+91-"+kartha->m_phn_num + "\n");
	slotStr += "Address \t: ";
	slotStr += (kartha->m_address + "\n");
	slotStr += ("Date \t\t\t\t: "+std::to_string(kartha->m_date) +"-"+g_month[kartha->m_month]+ "-"+std::to_string(kartha->m_year)+" , ");
	slotStr += (GetDayFromDate((const int )kartha->m_date,(const int )kartha->m_month,(int &)kartha->m_year) + "\n");
	SendToBot(slotStr);
}
